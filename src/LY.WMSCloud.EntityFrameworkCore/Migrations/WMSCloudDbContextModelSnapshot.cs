// <auto-generated />
using Abp.Authorization;
using Abp.BackgroundJobs;
using Abp.Events.Bus.Entities;
using Abp.Notifications;
using LY.WMSCloud.Entities.BaseData;
using LY.WMSCloud.Entities.ProduceData;
using LY.WMSCloud.Entities.StorageData;
using LY.WMSCloud.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using Microsoft.EntityFrameworkCore.ValueGeneration;
using System;

namespace LY.WMSCloud.Migrations
{
    [DbContext(typeof(WMSCloudDbContext))]
    partial class WMSCloudDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn)
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125");

            modelBuilder.Entity("Abp.Application.Editions.Edition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.HasKey("Id");

                    b.ToTable("AbpEditions");
                });

            modelBuilder.Entity("Abp.Application.Features.FeatureSetting", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<int?>("TenantId");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.HasKey("Id");

                    b.ToTable("AbpFeatures");

                    b.HasDiscriminator<string>("Discriminator").HasValue("FeatureSetting");
                });

            modelBuilder.Entity("Abp.Auditing.AuditLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BrowserInfo")
                        .HasMaxLength(256);

                    b.Property<string>("ClientIpAddress")
                        .HasMaxLength(64);

                    b.Property<string>("ClientName")
                        .HasMaxLength(128);

                    b.Property<string>("CustomData")
                        .HasMaxLength(2000);

                    b.Property<string>("Exception")
                        .HasMaxLength(2000);

                    b.Property<int>("ExecutionDuration");

                    b.Property<DateTime>("ExecutionTime");

                    b.Property<int?>("ImpersonatorTenantId");

                    b.Property<long?>("ImpersonatorUserId");

                    b.Property<string>("MethodName")
                        .HasMaxLength(256);

                    b.Property<string>("Parameters")
                        .HasMaxLength(1024);

                    b.Property<string>("ServiceName")
                        .HasMaxLength(256);

                    b.Property<int?>("TenantId");

                    b.Property<long?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "ExecutionDuration");

                    b.HasIndex("TenantId", "ExecutionTime");

                    b.HasIndex("TenantId", "UserId");

                    b.ToTable("AbpAuditLogs");
                });

            modelBuilder.Entity("Abp.Authorization.PermissionSetting", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<bool>("IsGranted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "Name");

                    b.ToTable("AbpPermissions");

                    b.HasDiscriminator<string>("Discriminator").HasValue("PermissionSetting");
                });

            modelBuilder.Entity("Abp.Authorization.Roles.RoleClaim", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType")
                        .HasMaxLength(256);

                    b.Property<string>("ClaimValue");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<int>("RoleId");

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("TenantId", "ClaimType");

                    b.ToTable("AbpRoleClaims");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserAccount", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(256);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastLoginTime");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int?>("TenantId");

                    b.Property<long>("UserId");

                    b.Property<long?>("UserLinkId");

                    b.Property<string>("UserName")
                        .HasMaxLength(32);

                    b.HasKey("Id");

                    b.HasIndex("EmailAddress");

                    b.HasIndex("UserName");

                    b.HasIndex("TenantId", "EmailAddress");

                    b.HasIndex("TenantId", "UserId");

                    b.HasIndex("TenantId", "UserName");

                    b.ToTable("AbpUserAccounts");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserClaim", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType")
                        .HasMaxLength(256);

                    b.Property<string>("ClaimValue");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<int?>("TenantId");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("TenantId", "ClaimType");

                    b.ToTable("AbpUserClaims");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserLogin", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("LoginProvider")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<int?>("TenantId");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("TenantId", "UserId");

                    b.HasIndex("TenantId", "LoginProvider", "ProviderKey");

                    b.ToTable("AbpUserLogins");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserLoginAttempt", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BrowserInfo")
                        .HasMaxLength(256);

                    b.Property<string>("ClientIpAddress")
                        .HasMaxLength(64);

                    b.Property<string>("ClientName")
                        .HasMaxLength(128);

                    b.Property<DateTime>("CreationTime");

                    b.Property<byte>("Result");

                    b.Property<string>("TenancyName")
                        .HasMaxLength(64);

                    b.Property<int?>("TenantId");

                    b.Property<long?>("UserId");

                    b.Property<string>("UserNameOrEmailAddress")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("UserId", "TenantId");

                    b.HasIndex("TenancyName", "UserNameOrEmailAddress", "Result");

                    b.ToTable("AbpUserLoginAttempts");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserOrganizationUnit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<bool>("IsDeleted");

                    b.Property<long>("OrganizationUnitId");

                    b.Property<int?>("TenantId");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "OrganizationUnitId");

                    b.HasIndex("TenantId", "UserId");

                    b.ToTable("AbpUserOrganizationUnits");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<int>("RoleId");

                    b.Property<int?>("TenantId");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("TenantId", "RoleId");

                    b.HasIndex("TenantId", "UserId");

                    b.ToTable("AbpUserRoles");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserToken", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<int?>("TenantId");

                    b.Property<long>("UserId");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("TenantId", "UserId");

                    b.ToTable("AbpUserTokens");
                });

            modelBuilder.Entity("Abp.BackgroundJobs.BackgroundJobInfo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<bool>("IsAbandoned");

                    b.Property<string>("JobArgs")
                        .IsRequired()
                        .HasMaxLength(1048576);

                    b.Property<string>("JobType")
                        .IsRequired()
                        .HasMaxLength(512);

                    b.Property<DateTime?>("LastTryTime");

                    b.Property<DateTime>("NextTryTime");

                    b.Property<byte>("Priority");

                    b.Property<short>("TryCount");

                    b.HasKey("Id");

                    b.HasIndex("IsAbandoned", "NextTryTime");

                    b.ToTable("AbpBackgroundJobs");
                });

            modelBuilder.Entity("Abp.Configuration.Setting", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<int?>("TenantId");

                    b.Property<long?>("UserId");

                    b.Property<string>("Value")
                        .HasMaxLength(2000);

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("TenantId", "Name");

                    b.ToTable("AbpSettings");
                });

            modelBuilder.Entity("Abp.EntityHistory.EntityChange", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("ChangeTime");

                    b.Property<byte>("ChangeType");

                    b.Property<long>("EntityChangeSetId");

                    b.Property<string>("EntityId")
                        .HasMaxLength(48);

                    b.Property<string>("EntityTypeFullName")
                        .HasMaxLength(192);

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("EntityChangeSetId");

                    b.HasIndex("EntityTypeFullName", "EntityId");

                    b.ToTable("AbpEntityChanges");
                });

            modelBuilder.Entity("Abp.EntityHistory.EntityChangeSet", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BrowserInfo")
                        .HasMaxLength(256);

                    b.Property<string>("ClientIpAddress")
                        .HasMaxLength(64);

                    b.Property<string>("ClientName")
                        .HasMaxLength(128);

                    b.Property<DateTime>("CreationTime");

                    b.Property<string>("ExtensionData");

                    b.Property<int?>("ImpersonatorTenantId");

                    b.Property<long?>("ImpersonatorUserId");

                    b.Property<string>("Reason")
                        .HasMaxLength(256);

                    b.Property<int?>("TenantId");

                    b.Property<long?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "CreationTime");

                    b.HasIndex("TenantId", "Reason");

                    b.HasIndex("TenantId", "UserId");

                    b.ToTable("AbpEntityChangeSets");
                });

            modelBuilder.Entity("Abp.EntityHistory.EntityPropertyChange", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("EntityChangeId");

                    b.Property<string>("NewValue")
                        .HasMaxLength(512);

                    b.Property<string>("OriginalValue")
                        .HasMaxLength(512);

                    b.Property<string>("PropertyName")
                        .HasMaxLength(96);

                    b.Property<string>("PropertyTypeFullName")
                        .HasMaxLength(192);

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("EntityChangeId");

                    b.ToTable("AbpEntityPropertyChanges");
                });

            modelBuilder.Entity("Abp.Localization.ApplicationLanguage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<string>("Icon")
                        .HasMaxLength(128);

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsDisabled");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "Name");

                    b.ToTable("AbpLanguages");
                });

            modelBuilder.Entity("Abp.Localization.ApplicationLanguageText", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("LanguageName")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<int?>("TenantId");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(67108864);

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "Source", "LanguageName", "Key");

                    b.ToTable("AbpLanguageTexts");
                });

            modelBuilder.Entity("Abp.Notifications.NotificationInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("Data")
                        .HasMaxLength(1048576);

                    b.Property<string>("DataTypeName")
                        .HasMaxLength(512);

                    b.Property<string>("EntityId")
                        .HasMaxLength(96);

                    b.Property<string>("EntityTypeAssemblyQualifiedName")
                        .HasMaxLength(512);

                    b.Property<string>("EntityTypeName")
                        .HasMaxLength(250);

                    b.Property<string>("ExcludedUserIds")
                        .HasMaxLength(131072);

                    b.Property<string>("NotificationName")
                        .IsRequired()
                        .HasMaxLength(96);

                    b.Property<byte>("Severity");

                    b.Property<string>("TenantIds")
                        .HasMaxLength(131072);

                    b.Property<string>("UserIds")
                        .HasMaxLength(131072);

                    b.HasKey("Id");

                    b.ToTable("AbpNotifications");
                });

            modelBuilder.Entity("Abp.Notifications.NotificationSubscriptionInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("EntityId")
                        .HasMaxLength(96);

                    b.Property<string>("EntityTypeAssemblyQualifiedName")
                        .HasMaxLength(512);

                    b.Property<string>("EntityTypeName")
                        .HasMaxLength(250);

                    b.Property<string>("NotificationName")
                        .HasMaxLength(96);

                    b.Property<int?>("TenantId");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("NotificationName", "EntityTypeName", "EntityId", "UserId");

                    b.HasIndex("TenantId", "NotificationName", "EntityTypeName", "EntityId", "UserId");

                    b.ToTable("AbpNotificationSubscriptions");
                });

            modelBuilder.Entity("Abp.Notifications.TenantNotificationInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("Data")
                        .HasMaxLength(1048576);

                    b.Property<string>("DataTypeName")
                        .HasMaxLength(512);

                    b.Property<string>("EntityId")
                        .HasMaxLength(96);

                    b.Property<string>("EntityTypeAssemblyQualifiedName")
                        .HasMaxLength(512);

                    b.Property<string>("EntityTypeName")
                        .HasMaxLength(250);

                    b.Property<string>("NotificationName")
                        .IsRequired()
                        .HasMaxLength(96);

                    b.Property<byte>("Severity");

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("AbpTenantNotifications");
                });

            modelBuilder.Entity("Abp.Notifications.UserNotificationInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<int>("State");

                    b.Property<int?>("TenantId");

                    b.Property<Guid>("TenantNotificationId");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId", "State", "CreationTime");

                    b.ToTable("AbpUserNotifications");
                });

            modelBuilder.Entity("Abp.Organizations.OrganizationUnit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(95);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<long?>("ParentId");

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.HasIndex("TenantId", "Code");

                    b.ToTable("AbpOrganizationUnits");
                });

            modelBuilder.Entity("LY.WMSCloud.Authorization.Roles.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("Description")
                        .HasMaxLength(5000);

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<int>("Grade");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDefault");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsStatic");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<string>("NormalizedName")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<int?>("OrgId");

                    b.Property<string>("Remark")
                        .HasMaxLength(2000);

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("OrgId");

                    b.HasIndex("TenantId", "NormalizedName");

                    b.ToTable("AbpRoles");
                });

            modelBuilder.Entity("LY.WMSCloud.Authorization.Users.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("AuthenticationSource")
                        .HasMaxLength(64);

                    b.Property<string>("Avatar");

                    b.Property<DateTime?>("Birthday");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("EmailConfirmationCode")
                        .HasMaxLength(328);

                    b.Property<string>("HomeAddress")
                        .HasMaxLength(500);

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsEmailConfirmed");

                    b.Property<bool>("IsLockoutEnabled");

                    b.Property<bool>("IsPhoneNumberConfirmed");

                    b.Property<bool>("IsTwoFactorEnabled");

                    b.Property<DateTime?>("LastLoginTime");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<DateTime?>("LockoutEndDateUtc");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<string>("NormalizedEmailAddress")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<string>("PasswordResetCode")
                        .HasMaxLength(328);

                    b.Property<string>("PhoneNumber");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("Sex");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<string>("Telephone")
                        .HasMaxLength(15);

                    b.Property<int?>("TenantId");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("TenantId", "NormalizedEmailAddress");

                    b.HasIndex("TenantId", "NormalizedUserName");

                    b.ToTable("AbpUsers");
                });

            modelBuilder.Entity("LY.WMSCloud.Entities.BaseData.BarCodeAnalysis", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36);

                    b.Property<string>("ClassName")
                        .HasMaxLength(30);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("ExtensionData");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsReplace");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name")
                        .HasMaxLength(30);

                    b.Property<string>("PropertyName")
                        .HasMaxLength(30);

                    b.Property<string>("RegEX")
                        .HasMaxLength(2000);

                    b.Property<int>("TenantId");

                    b.Property<string>("Test")
                        .HasMaxLength(1000);

                    b.Property<string>("TestValue")
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.ToTable("WMSBarCodeAnalysis");
                });

            modelBuilder.Entity("LY.WMSCloud.Entities.BaseData.BOM", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36);

                    b.Property<bool>("AllowableMoreSend");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("ExtensionData");

                    b.Property<bool>("IsActive");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<double>("MoreSendPercentage");

                    b.Property<string>("PartNoId")
                        .HasMaxLength(36);

                    b.Property<string>("ProductId")
                        .HasMaxLength(36);

                    b.Property<int>("Qty");

                    b.Property<int>("TenantId");

                    b.Property<string>("Version")
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.HasIndex("PartNoId");

                    b.HasIndex("ProductId");

                    b.ToTable("WMSBOM");
                });

            modelBuilder.Entity("LY.WMSCloud.Entities.BaseData.Customer", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("ExtensionData");

                    b.Property<bool>("IsActive");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name")
                        .HasMaxLength(30);

                    b.Property<string>("Remark")
                        .HasMaxLength(500);

                    b.Property<int>("TenantId");

                    b.HasKey("Id");

                    b.ToTable("WMSCustomer");
                });

            modelBuilder.Entity("LY.WMSCloud.Entities.BaseData.Line", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("ExtensionData");

                    b.Property<string>("ForCustomerMStorageId")
                        .HasMaxLength(36);

                    b.Property<string>("ForSelfMStorageId")
                        .HasMaxLength(36);

                    b.Property<bool>("IsActive");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name")
                        .HasMaxLength(30);

                    b.Property<string>("Remark")
                        .HasMaxLength(500);

                    b.Property<int>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("ForCustomerMStorageId");

                    b.HasIndex("ForSelfMStorageId");

                    b.ToTable("WMSLine");
                });

            modelBuilder.Entity("LY.WMSCloud.Entities.BaseData.MPN", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("CustomerId")
                        .HasMaxLength(36);

                    b.Property<string>("ExtensionData");

                    b.Property<int>("IncomingMethod");

                    b.Property<string>("Info")
                        .HasMaxLength(500);

                    b.Property<bool>("IsActive");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int>("MPNHierarchy");

                    b.Property<int>("MPNLevel");

                    b.Property<int>("MPNType");

                    b.Property<string>("MPQs")
                        .HasMaxLength(50);

                    b.Property<int>("MSDLevel");

                    b.Property<string>("Name")
                        .HasMaxLength(500);

                    b.Property<string>("RegisterStorageId")
                        .HasMaxLength(36);

                    b.Property<string>("Remark")
                        .HasMaxLength(500);

                    b.Property<double>("ShelfLife");

                    b.Property<string>("Supplier")
                        .HasMaxLength(200);

                    b.Property<int>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("RegisterStorageId");

                    b.ToTable("WMSMPN");
                });

            modelBuilder.Entity("LY.WMSCloud.Entities.BaseData.ReadySlot", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36);

                    b.Property<int>("BoardSide");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<int>("DemandQty");

                    b.Property<string>("ExtensionData");

                    b.Property<string>("Feeder")
                        .HasMaxLength(50);

                    b.Property<bool>("IsActive");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("LineId")
                        .HasMaxLength(36);

                    b.Property<int>("LineSide");

                    b.Property<string>("Location")
                        .HasMaxLength(1000);

                    b.Property<string>("Machine")
                        .HasMaxLength(30);

                    b.Property<string>("MachineType")
                        .HasMaxLength(30);

                    b.Property<string>("PartNoId")
                        .HasMaxLength(36);

                    b.Property<string>("ProductId")
                        .HasMaxLength(36);

                    b.Property<int>("Qty");

                    b.Property<string>("ReReadyMBillId")
                        .HasMaxLength(36);

                    b.Property<string>("ReadyMBillDetailedId")
                        .HasMaxLength(36);

                    b.Property<string>("SendPartNoId")
                        .HasMaxLength(36);

                    b.Property<int>("SendQty");

                    b.Property<int>("Side");

                    b.Property<string>("SlotId");

                    b.Property<string>("SlotName")
                        .HasMaxLength(30);

                    b.Property<string>("Table")
                        .HasMaxLength(10);

                    b.Property<int>("TenantId");

                    b.Property<string>("Version")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.HasIndex("LineId");

                    b.HasIndex("PartNoId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ReReadyMBillId");

                    b.HasIndex("ReadyMBillDetailedId");

                    b.HasIndex("SendPartNoId");

                    b.HasIndex("SlotId");

                    b.ToTable("WMSReadySlot");
                });

            modelBuilder.Entity("LY.WMSCloud.Entities.BaseData.Slot", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BoardSide");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("ExtensionData");

                    b.Property<string>("Feeder")
                        .HasMaxLength(50);

                    b.Property<int>("Index");

                    b.Property<bool>("IsActive");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("LineId")
                        .HasMaxLength(30);

                    b.Property<int>("LineSide");

                    b.Property<string>("Location")
                        .HasMaxLength(1000);

                    b.Property<string>("Machine")
                        .HasMaxLength(30);

                    b.Property<string>("MachineType")
                        .HasMaxLength(30);

                    b.Property<string>("PartNoId")
                        .HasMaxLength(36);

                    b.Property<string>("ProductId")
                        .HasMaxLength(36);

                    b.Property<int>("Qty");

                    b.Property<int>("Side");

                    b.Property<string>("SlotName")
                        .HasMaxLength(30);

                    b.Property<string>("Table")
                        .HasMaxLength(10);

                    b.Property<int>("TenantId");

                    b.Property<string>("Version")
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.HasIndex("LineId");

                    b.HasIndex("PartNoId");

                    b.HasIndex("ProductId");

                    b.ToTable("WMSSlot");
                });

            modelBuilder.Entity("LY.WMSCloud.Entities.Menu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Acl")
                        .HasMaxLength(30);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("ExtensionData");

                    b.Property<string>("ExternalLink")
                        .HasMaxLength(500);

                    b.Property<bool>("Group");

                    b.Property<string>("I18n")
                        .HasMaxLength(50);

                    b.Property<string>("Icon")
                        .HasMaxLength(30);

                    b.Property<int>("Index");

                    b.Property<bool>("IsActive");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Link")
                        .HasMaxLength(500);

                    b.Property<int?>("ParentId");

                    b.Property<string>("Target")
                        .HasMaxLength(10);

                    b.Property<int?>("TenantId");

                    b.Property<string>("Text")
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("SysMenu");
                });

            modelBuilder.Entity("LY.WMSCloud.Entities.Org", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .HasMaxLength(30);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("Description")
                        .HasMaxLength(200);

                    b.Property<string>("ExtensionData");

                    b.Property<bool>("IsActive");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name")
                        .HasMaxLength(50);

                    b.Property<int?>("ParentId");

                    b.Property<string>("Remark")
                        .HasMaxLength(500);

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("SysOrg");
                });

            modelBuilder.Entity("LY.WMSCloud.Entities.ProduceData.PrintReel", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30);

                    b.Property<string>("BatchCode")
                        .HasMaxLength(30);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("DateCode")
                        .HasMaxLength(15);

                    b.Property<string>("ExtensionData");

                    b.Property<string>("IQCCheckId")
                        .HasMaxLength(30);

                    b.Property<string>("Info")
                        .HasMaxLength(500);

                    b.Property<bool>("IsActive");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("LotCode")
                        .HasMaxLength(50);

                    b.Property<DateTime>("MakeDate");

                    b.Property<string>("Name")
                        .HasMaxLength(500);

                    b.Property<string>("PartNoId")
                        .HasMaxLength(36);

                    b.Property<string>("PoId")
                        .HasMaxLength(30);

                    b.Property<int>("PrintIndex");

                    b.Property<string>("PrintStr")
                        .HasMaxLength(36);

                    b.Property<int>("Qty");

                    b.Property<string>("ReceivedReelBillId")
                        .HasMaxLength(36);

                    b.Property<string>("Supplier")
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.HasIndex("PartNoId");

                    b.HasIndex("ReceivedReelBillId");

                    b.ToTable("WMSPrintReel");
                });

            modelBuilder.Entity("LY.WMSCloud.Entities.ProduceData.ReadyMBill", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30);

                    b.Property<int>("ConsumingTime");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<DateTime>("DeliverObject");

                    b.Property<DateTime>("DeliverTime");

                    b.Property<string>("ExtensionData");

                    b.Property<bool>("IsActive");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Linestr")
                        .HasMaxLength(50);

                    b.Property<int>("MakeDetailsType");

                    b.Property<int>("Priority");

                    b.Property<string>("Productstr")
                        .HasMaxLength(100);

                    b.Property<string>("ReReadyMBillId")
                        .HasMaxLength(36);

                    b.Property<int>("ReadyMType");

                    b.Property<string>("ReelMoveMethodId")
                        .HasMaxLength(30);

                    b.Property<string>("Remark")
                        .HasMaxLength(500);

                    b.Property<int>("TenantId");

                    b.Property<string>("WorkBilQtys")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("ReReadyMBillId");

                    b.HasIndex("ReelMoveMethodId");

                    b.ToTable("WMSReadyMBill");
                });

            modelBuilder.Entity("LY.WMSCloud.Entities.ProduceData.ReadyMBillDetailed", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36);

                    b.Property<string>("BOMId")
                        .HasMaxLength(36);

                    b.Property<string>("BatchCodes")
                        .HasMaxLength(50);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<int>("DemandQty");

                    b.Property<string>("ExtensionData");

                    b.Property<int>("FollowQty");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsCut");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("PartNoId")
                        .HasMaxLength(36);

                    b.Property<bool>("PriorityReplacePN");

                    b.Property<int>("Qty");

                    b.Property<string>("ReadyMBillId")
                        .HasMaxLength(36);

                    b.Property<string>("ReelMoveMethodId")
                        .HasMaxLength(36);

                    b.Property<string>("ReplacePNs")
                        .HasMaxLength(50);

                    b.Property<int>("ReturnQty");

                    b.Property<int>("SendQty");

                    b.Property<string>("SlotId")
                        .HasMaxLength(36);

                    b.Property<string>("Suppliers")
                        .HasMaxLength(50);

                    b.Property<int>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("BOMId");

                    b.HasIndex("PartNoId");

                    b.HasIndex("ReadyMBillId");

                    b.HasIndex("ReelMoveMethodId");

                    b.HasIndex("SlotId");

                    b.ToTable("WMSReadyMBillDetailed");
                });

            modelBuilder.Entity("LY.WMSCloud.Entities.ProduceData.ReadyMBillWorkBillMap", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("ExtensionData");

                    b.Property<bool>("IsActive");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int>("Qty");

                    b.Property<string>("ReadyMBillId");

                    b.Property<int>("TenantId");

                    b.Property<string>("WorkBillId");

                    b.HasKey("Id");

                    b.HasIndex("ReadyMBillId");

                    b.HasIndex("WorkBillId");

                    b.ToTable("WMSReadyMBillWorkBillMap");
                });

            modelBuilder.Entity("LY.WMSCloud.Entities.ProduceData.ReceivedReelBill", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("ExtensionData");

                    b.Property<string>("IQCCheckId")
                        .HasMaxLength(30);

                    b.Property<bool>("IsActive");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("PartNoId")
                        .HasMaxLength(36);

                    b.Property<string>("PoId")
                        .HasMaxLength(200);

                    b.Property<int>("Qty");

                    b.Property<int>("ReceivedQty");

                    b.Property<string>("Remark")
                        .HasMaxLength(500);

                    b.Property<int>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("PartNoId");

                    b.ToTable("WMSReceivedReelBill");
                });

            modelBuilder.Entity("LY.WMSCloud.Entities.ProduceData.Reel", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(60);

                    b.Property<string>("BatchCode")
                        .HasMaxLength(30);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("DateCode")
                        .HasMaxLength(15);

                    b.Property<double>("ExtendShelfLife");

                    b.Property<string>("ExtensionData");

                    b.Property<string>("IQCCheckId")
                        .HasMaxLength(30);

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsUseed");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("LotCode")
                        .HasMaxLength(50);

                    b.Property<DateTime>("MakeDate");

                    b.Property<string>("PartNoId")
                        .HasMaxLength(36);

                    b.Property<string>("PoId")
                        .HasMaxLength(30);

                    b.Property<int>("Qty");

                    b.Property<string>("ReadyMBillDetailedId")
                        .HasMaxLength(36);

                    b.Property<string>("ReadyMBillId")
                        .HasMaxLength(30);

                    b.Property<string>("ReceivedReelBillId")
                        .HasMaxLength(36);

                    b.Property<string>("SlotId");

                    b.Property<string>("StorageId")
                        .HasMaxLength(36);

                    b.Property<string>("StorageLocationId")
                        .HasMaxLength(36);

                    b.Property<string>("StorageLocationId1");

                    b.Property<string>("Supplier")
                        .HasMaxLength(30);

                    b.Property<int>("TenantId");

                    b.Property<string>("WorkBillDetailedId")
                        .HasMaxLength(36);

                    b.Property<string>("WorkBillId")
                        .HasMaxLength(36);

                    b.HasKey("Id");

                    b.HasIndex("PartNoId");

                    b.HasIndex("ReadyMBillDetailedId");

                    b.HasIndex("ReadyMBillId");

                    b.HasIndex("ReceivedReelBillId");

                    b.HasIndex("StorageId");

                    b.HasIndex("StorageLocationId");

                    b.HasIndex("StorageLocationId1");

                    b.HasIndex("WorkBillDetailedId");

                    b.HasIndex("WorkBillId");

                    b.ToTable("WMSReel");
                });

            modelBuilder.Entity("LY.WMSCloud.Entities.ProduceData.ReelMoveLog", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36);

                    b.Property<string>("BOMId");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("ExtensionData");

                    b.Property<bool>("IsActive");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("PartNoId")
                        .HasMaxLength(36);

                    b.Property<int>("Qty");

                    b.Property<string>("ReadyMBillDetailedId")
                        .HasMaxLength(36);

                    b.Property<string>("ReadyMBillId")
                        .HasMaxLength(36);

                    b.Property<string>("ReceivedReelBillId")
                        .HasMaxLength(36);

                    b.Property<string>("ReelId")
                        .HasMaxLength(100);

                    b.Property<string>("ReelMoveMethodId")
                        .HasMaxLength(36);

                    b.Property<string>("SlotId");

                    b.Property<string>("StorageLocationId")
                        .HasMaxLength(36);

                    b.Property<int>("TenantId");

                    b.Property<string>("WorkBillId")
                        .HasMaxLength(36);

                    b.HasKey("Id");

                    b.HasIndex("BOMId");

                    b.HasIndex("PartNoId");

                    b.HasIndex("ReadyMBillDetailedId");

                    b.HasIndex("ReadyMBillId");

                    b.HasIndex("ReceivedReelBillId");

                    b.HasIndex("ReelMoveMethodId");

                    b.HasIndex("SlotId");

                    b.HasIndex("StorageLocationId");

                    b.HasIndex("WorkBillId");

                    b.ToTable("WMSReelMoveMethodLog");
                });

            modelBuilder.Entity("LY.WMSCloud.Entities.ProduceData.ReelMoveMethod", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30);

                    b.Property<string>("AllocationTypesStr")
                        .HasMaxLength(100);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("ExtensionData");

                    b.Property<string>("InStorageId")
                        .HasMaxLength(36);

                    b.Property<bool>("IsActive");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name")
                        .HasMaxLength(30);

                    b.Property<string>("Remark")
                        .HasMaxLength(500);

                    b.Property<int>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("InStorageId");

                    b.ToTable("WMSReelMoveMethod");
                });

            modelBuilder.Entity("LY.WMSCloud.Entities.ProduceData.ReelSendTemp", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(60);

                    b.Property<string>("BOMId")
                        .HasMaxLength(36);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<int>("DemandQty");

                    b.Property<int>("DemandSendQty");

                    b.Property<string>("FisrtStorageLocationId")
                        .HasMaxLength(36);

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsCut");

                    b.Property<bool>("IsSend");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("PartNoId")
                        .HasMaxLength(36);

                    b.Property<int>("Qty");

                    b.Property<string>("ReReadyMBillId")
                        .HasMaxLength(36);

                    b.Property<string>("ReadyMBillDetailedId")
                        .HasMaxLength(36);

                    b.Property<string>("ReelMoveMethodId")
                        .HasMaxLength(36);

                    b.Property<int>("SelectQty");

                    b.Property<int>("SendQty");

                    b.Property<string>("SlotId");

                    b.Property<string>("StorageLocationId")
                        .HasMaxLength(36);

                    b.Property<int>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("BOMId");

                    b.HasIndex("PartNoId");

                    b.HasIndex("ReReadyMBillId");

                    b.HasIndex("ReadyMBillDetailedId");

                    b.HasIndex("ReelMoveMethodId");

                    b.HasIndex("SlotId");

                    b.HasIndex("StorageLocationId");

                    b.ToTable("WMSReelSendTemp");
                });

            modelBuilder.Entity("LY.WMSCloud.Entities.ProduceData.ReelShortTemp", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36);

                    b.Property<string>("BOMId")
                        .HasMaxLength(36);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<int>("DemandQty");

                    b.Property<int>("DemandSendQty");

                    b.Property<bool>("IsActive");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("PartNoId")
                        .HasMaxLength(36);

                    b.Property<string>("ReReadyMBillId")
                        .HasMaxLength(36);

                    b.Property<string>("ReadyMBillDetailedId")
                        .HasMaxLength(36);

                    b.Property<int>("SelectQty");

                    b.Property<int>("ShortQty");

                    b.Property<string>("SlotId");

                    b.Property<int>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("BOMId");

                    b.HasIndex("PartNoId");

                    b.HasIndex("ReReadyMBillId");

                    b.HasIndex("ReadyMBillDetailedId");

                    b.HasIndex("SlotId");

                    b.ToTable("WMSReelShortTemp");
                });

            modelBuilder.Entity("LY.WMSCloud.Entities.ProduceData.ReelSupplyTemp", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(60);

                    b.Property<string>("BOMId")
                        .HasMaxLength(36);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<int>("DemandQty");

                    b.Property<int>("DemandSendQty");

                    b.Property<string>("ExtensionData");

                    b.Property<string>("FisrtStorageLocationId")
                        .HasMaxLength(36);

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsCut");

                    b.Property<bool>("IsSend");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("PartNoId")
                        .HasMaxLength(36);

                    b.Property<int>("Qty");

                    b.Property<string>("ReReadyMBillId")
                        .HasMaxLength(36);

                    b.Property<string>("ReadyMBillDetailedId")
                        .HasMaxLength(36);

                    b.Property<string>("ReelMoveMethodId")
                        .HasMaxLength(36);

                    b.Property<int>("SelectQty");

                    b.Property<int>("SendQty");

                    b.Property<string>("SlotId");

                    b.Property<string>("StorageLocationId")
                        .HasMaxLength(36);

                    b.Property<int>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("BOMId");

                    b.HasIndex("PartNoId");

                    b.HasIndex("ReReadyMBillId");

                    b.HasIndex("ReadyMBillDetailedId");

                    b.HasIndex("ReelMoveMethodId");

                    b.HasIndex("SlotId");

                    b.HasIndex("StorageLocationId");

                    b.ToTable("WMSReelSupplyTemp");
                });

            modelBuilder.Entity("LY.WMSCloud.Entities.ProduceData.UPH", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("ExtensionData");

                    b.Property<bool>("IsActive");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("LineId")
                        .HasMaxLength(36);

                    b.Property<int>("Meter");

                    b.Property<int>("Pin");

                    b.Property<string>("ProductId")
                        .HasMaxLength(36);

                    b.Property<int>("Qty");

                    b.Property<string>("Remark")
                        .HasMaxLength(500);

                    b.Property<int>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("LineId");

                    b.HasIndex("ProductId");

                    b.ToTable("WMSUPH");
                });

            modelBuilder.Entity("LY.WMSCloud.Entities.ProduceData.WorkBill", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<DateTime>("EndTime");

                    b.Property<string>("ExtensionData");

                    b.Property<bool>("IsActive");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("LineId")
                        .HasMaxLength(36);

                    b.Property<DateTime>("PlanEndTime");

                    b.Property<DateTime>("PlanStartTime");

                    b.Property<string>("ProductId")
                        .HasMaxLength(36);

                    b.Property<int>("ProductionQty");

                    b.Property<int>("Qty");

                    b.Property<int>("ReadyMQty");

                    b.Property<string>("Remark")
                        .HasMaxLength(500);

                    b.Property<DateTime>("StartTime");

                    b.Property<int>("TenantId");

                    b.Property<int>("WorkBillStatus");

                    b.HasKey("Id");

                    b.HasIndex("LineId");

                    b.HasIndex("ProductId");

                    b.ToTable("WMSWorkBill");
                });

            modelBuilder.Entity("LY.WMSCloud.Entities.ProduceData.WorkBillDetailed", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36);

                    b.Property<string>("BOMId")
                        .HasMaxLength(36);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("ExtensionData");

                    b.Property<bool>("IsActive");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("PartNoId")
                        .HasMaxLength(36);

                    b.Property<int>("Qty");

                    b.Property<int>("ReturnQty");

                    b.Property<int>("SendQty");

                    b.Property<string>("SlotId");

                    b.Property<int>("TenantId");

                    b.Property<string>("WorkBillId")
                        .HasMaxLength(36);

                    b.HasKey("Id");

                    b.HasIndex("BOMId");

                    b.HasIndex("PartNoId");

                    b.HasIndex("SlotId");

                    b.HasIndex("WorkBillId");

                    b.ToTable("WMSWorkBillDetailed");
                });

            modelBuilder.Entity("LY.WMSCloud.Entities.StorageData.MPNStorageAreaMap", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("ExtensionData");

                    b.Property<bool>("IsActive");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("MPNId")
                        .HasMaxLength(36);

                    b.Property<string>("StorageAreaId")
                        .HasMaxLength(36);

                    b.Property<int>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("MPNId");

                    b.HasIndex("StorageAreaId");

                    b.ToTable("WMSMPNStorageAreaMap");
                });

            modelBuilder.Entity("LY.WMSCloud.Entities.StorageData.RMMStorageMap", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("ExtensionData");

                    b.Property<bool>("IsActive");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("ReelMoveMethodId")
                        .HasMaxLength(36);

                    b.Property<string>("StorageId")
                        .HasMaxLength(36);

                    b.Property<int>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("ReelMoveMethodId");

                    b.HasIndex("StorageId");

                    b.ToTable("WMSRMMStorageMap");
                });

            modelBuilder.Entity("LY.WMSCloud.Entities.StorageData.Storage", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30);

                    b.Property<int?>("AboutUserId");

                    b.Property<long?>("AboutUserId1");

                    b.Property<string>("Address")
                        .HasMaxLength(200);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("ExtensionData");

                    b.Property<int>("IncomingMethod");

                    b.Property<bool>("IsActive");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name")
                        .HasMaxLength(30);

                    b.Property<string>("Remark")
                        .HasMaxLength(500);

                    b.Property<int>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("AboutUserId1");

                    b.ToTable("WMSStorage");
                });

            modelBuilder.Entity("LY.WMSCloud.Entities.StorageData.StorageArea", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("ExtensionData");

                    b.Property<bool>("IsActive");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name")
                        .HasMaxLength(30);

                    b.Property<string>("Remark")
                        .HasMaxLength(500);

                    b.Property<int>("TenantId");

                    b.HasKey("Id");

                    b.ToTable("WMSStorageArea");
                });

            modelBuilder.Entity("LY.WMSCloud.Entities.StorageData.StorageLocation", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30);

                    b.Property<string>("Code")
                        .HasMaxLength(30);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("ExtensionData");

                    b.Property<bool>("IsActive");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int>("LightColor");

                    b.Property<int>("LightState");

                    b.Property<int>("MainBoardId");

                    b.Property<string>("Name")
                        .HasMaxLength(30);

                    b.Property<int>("PositionId");

                    b.Property<string>("ReelId")
                        .HasMaxLength(100);

                    b.Property<string>("Remark")
                        .HasMaxLength(500);

                    b.Property<string>("StorageAreaId")
                        .HasMaxLength(36);

                    b.Property<string>("StorageId")
                        .HasMaxLength(36);

                    b.Property<string>("StorageLocationTypeId")
                        .HasMaxLength(36);

                    b.Property<int>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("ReelId");

                    b.HasIndex("StorageAreaId");

                    b.HasIndex("StorageId");

                    b.HasIndex("StorageLocationTypeId");

                    b.ToTable("WMSStorageLocation");
                });

            modelBuilder.Entity("LY.WMSCloud.Entities.StorageData.StorageLocationType", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("ExtensionData");

                    b.Property<bool>("IsActive");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<bool>("MoreMateriel");

                    b.Property<string>("Name")
                        .HasMaxLength(30);

                    b.Property<string>("Remark")
                        .HasMaxLength(500);

                    b.Property<int>("TenantId");

                    b.HasKey("Id");

                    b.ToTable("WMSStorageLocationType");
                });

            modelBuilder.Entity("LY.WMSCloud.MultiTenancy.Tenant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConnectionString")
                        .HasMaxLength(1024);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<int?>("EditionId");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<string>("TenancyName")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("EditionId");

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("TenancyName");

                    b.ToTable("AbpTenants");
                });

            modelBuilder.Entity("Abp.Application.Features.EditionFeatureSetting", b =>
                {
                    b.HasBaseType("Abp.Application.Features.FeatureSetting");

                    b.Property<int>("EditionId");

                    b.HasIndex("EditionId", "Name");

                    b.ToTable("AbpFeatures");

                    b.HasDiscriminator().HasValue("EditionFeatureSetting");
                });

            modelBuilder.Entity("Abp.MultiTenancy.TenantFeatureSetting", b =>
                {
                    b.HasBaseType("Abp.Application.Features.FeatureSetting");


                    b.HasIndex("TenantId", "Name");

                    b.ToTable("AbpFeatures");

                    b.HasDiscriminator().HasValue("TenantFeatureSetting");
                });

            modelBuilder.Entity("Abp.Authorization.Roles.RolePermissionSetting", b =>
                {
                    b.HasBaseType("Abp.Authorization.PermissionSetting");

                    b.Property<int>("RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AbpPermissions");

                    b.HasDiscriminator().HasValue("RolePermissionSetting");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserPermissionSetting", b =>
                {
                    b.HasBaseType("Abp.Authorization.PermissionSetting");

                    b.Property<long>("UserId");

                    b.HasIndex("UserId");

                    b.ToTable("AbpPermissions");

                    b.HasDiscriminator().HasValue("UserPermissionSetting");
                });

            modelBuilder.Entity("Abp.Authorization.Roles.RoleClaim", b =>
                {
                    b.HasOne("LY.WMSCloud.Authorization.Roles.Role")
                        .WithMany("Claims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserClaim", b =>
                {
                    b.HasOne("LY.WMSCloud.Authorization.Users.User")
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserLogin", b =>
                {
                    b.HasOne("LY.WMSCloud.Authorization.Users.User")
                        .WithMany("Logins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserRole", b =>
                {
                    b.HasOne("LY.WMSCloud.Authorization.Users.User")
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserToken", b =>
                {
                    b.HasOne("LY.WMSCloud.Authorization.Users.User")
                        .WithMany("Tokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Abp.Configuration.Setting", b =>
                {
                    b.HasOne("LY.WMSCloud.Authorization.Users.User")
                        .WithMany("Settings")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Abp.EntityHistory.EntityChange", b =>
                {
                    b.HasOne("Abp.EntityHistory.EntityChangeSet")
                        .WithMany("EntityChanges")
                        .HasForeignKey("EntityChangeSetId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Abp.EntityHistory.EntityPropertyChange", b =>
                {
                    b.HasOne("Abp.EntityHistory.EntityChange")
                        .WithMany("PropertyChanges")
                        .HasForeignKey("EntityChangeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Abp.Organizations.OrganizationUnit", b =>
                {
                    b.HasOne("Abp.Organizations.OrganizationUnit", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("LY.WMSCloud.Authorization.Roles.Role", b =>
                {
                    b.HasOne("LY.WMSCloud.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("LY.WMSCloud.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("LY.WMSCloud.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");

                    b.HasOne("LY.WMSCloud.Entities.Org", "Org")
                        .WithMany("Roles")
                        .HasForeignKey("OrgId");
                });

            modelBuilder.Entity("LY.WMSCloud.Authorization.Users.User", b =>
                {
                    b.HasOne("LY.WMSCloud.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("LY.WMSCloud.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("LY.WMSCloud.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");
                });

            modelBuilder.Entity("LY.WMSCloud.Entities.BaseData.BOM", b =>
                {
                    b.HasOne("LY.WMSCloud.Entities.BaseData.MPN", "PartNo")
                        .WithMany()
                        .HasForeignKey("PartNoId");

                    b.HasOne("LY.WMSCloud.Entities.BaseData.MPN", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");
                });

            modelBuilder.Entity("LY.WMSCloud.Entities.BaseData.Line", b =>
                {
                    b.HasOne("LY.WMSCloud.Entities.StorageData.Storage", "ForCustomerMStorage")
                        .WithMany()
                        .HasForeignKey("ForCustomerMStorageId");

                    b.HasOne("LY.WMSCloud.Entities.StorageData.Storage", "ForSelfMStorage")
                        .WithMany()
                        .HasForeignKey("ForSelfMStorageId");
                });

            modelBuilder.Entity("LY.WMSCloud.Entities.BaseData.MPN", b =>
                {
                    b.HasOne("LY.WMSCloud.Entities.BaseData.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId");

                    b.HasOne("LY.WMSCloud.Entities.StorageData.Storage", "RegisterStorage")
                        .WithMany()
                        .HasForeignKey("RegisterStorageId");
                });

            modelBuilder.Entity("LY.WMSCloud.Entities.BaseData.ReadySlot", b =>
                {
                    b.HasOne("LY.WMSCloud.Entities.BaseData.Line", "Line")
                        .WithMany()
                        .HasForeignKey("LineId");

                    b.HasOne("LY.WMSCloud.Entities.BaseData.MPN", "PartNo")
                        .WithMany()
                        .HasForeignKey("PartNoId");

                    b.HasOne("LY.WMSCloud.Entities.BaseData.MPN", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.HasOne("LY.WMSCloud.Entities.ProduceData.ReadyMBill", "ReReadyMBill")
                        .WithMany()
                        .HasForeignKey("ReReadyMBillId");

                    b.HasOne("LY.WMSCloud.Entities.ProduceData.ReadyMBillDetailed", "ReadyMBillDetailed")
                        .WithMany()
                        .HasForeignKey("ReadyMBillDetailedId");

                    b.HasOne("LY.WMSCloud.Entities.BaseData.MPN", "SendPartNo")
                        .WithMany()
                        .HasForeignKey("SendPartNoId");

                    b.HasOne("LY.WMSCloud.Entities.BaseData.Slot", "Slot")
                        .WithMany()
                        .HasForeignKey("SlotId");
                });

            modelBuilder.Entity("LY.WMSCloud.Entities.BaseData.Slot", b =>
                {
                    b.HasOne("LY.WMSCloud.Entities.BaseData.Line", "Line")
                        .WithMany()
                        .HasForeignKey("LineId");

                    b.HasOne("LY.WMSCloud.Entities.BaseData.MPN", "PartNo")
                        .WithMany()
                        .HasForeignKey("PartNoId");

                    b.HasOne("LY.WMSCloud.Entities.BaseData.MPN", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");
                });

            modelBuilder.Entity("LY.WMSCloud.Entities.Menu", b =>
                {
                    b.HasOne("LY.WMSCloud.Entities.Menu", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("LY.WMSCloud.Entities.Org", b =>
                {
                    b.HasOne("LY.WMSCloud.Entities.Org", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("LY.WMSCloud.Entities.ProduceData.PrintReel", b =>
                {
                    b.HasOne("LY.WMSCloud.Entities.BaseData.MPN", "PartNo")
                        .WithMany()
                        .HasForeignKey("PartNoId");

                    b.HasOne("LY.WMSCloud.Entities.ProduceData.ReceivedReelBill", "ReceivedReelBill")
                        .WithMany()
                        .HasForeignKey("ReceivedReelBillId");
                });

            modelBuilder.Entity("LY.WMSCloud.Entities.ProduceData.ReadyMBill", b =>
                {
                    b.HasOne("LY.WMSCloud.Entities.ProduceData.ReadyMBill", "ReReadyMBill")
                        .WithMany()
                        .HasForeignKey("ReReadyMBillId");

                    b.HasOne("LY.WMSCloud.Entities.ProduceData.ReelMoveMethod", "ReelMoveMethod")
                        .WithMany()
                        .HasForeignKey("ReelMoveMethodId");
                });

            modelBuilder.Entity("LY.WMSCloud.Entities.ProduceData.ReadyMBillDetailed", b =>
                {
                    b.HasOne("LY.WMSCloud.Entities.BaseData.BOM", "BOM")
                        .WithMany()
                        .HasForeignKey("BOMId");

                    b.HasOne("LY.WMSCloud.Entities.BaseData.MPN", "PartNo")
                        .WithMany()
                        .HasForeignKey("PartNoId");

                    b.HasOne("LY.WMSCloud.Entities.ProduceData.ReadyMBill", "ReadyMBill")
                        .WithMany("ReadyMBillDetailed")
                        .HasForeignKey("ReadyMBillId");

                    b.HasOne("LY.WMSCloud.Entities.ProduceData.ReelMoveMethod", "ReelMoveMethod")
                        .WithMany()
                        .HasForeignKey("ReelMoveMethodId");

                    b.HasOne("LY.WMSCloud.Entities.BaseData.Slot", "Slot")
                        .WithMany()
                        .HasForeignKey("SlotId");
                });

            modelBuilder.Entity("LY.WMSCloud.Entities.ProduceData.ReadyMBillWorkBillMap", b =>
                {
                    b.HasOne("LY.WMSCloud.Entities.ProduceData.ReadyMBill", "ReadyMBill")
                        .WithMany("WorkBills")
                        .HasForeignKey("ReadyMBillId");

                    b.HasOne("LY.WMSCloud.Entities.ProduceData.WorkBill", "WorkBill")
                        .WithMany("ReadyMBills")
                        .HasForeignKey("WorkBillId");
                });

            modelBuilder.Entity("LY.WMSCloud.Entities.ProduceData.ReceivedReelBill", b =>
                {
                    b.HasOne("LY.WMSCloud.Entities.BaseData.MPN", "PartNo")
                        .WithMany()
                        .HasForeignKey("PartNoId");
                });

            modelBuilder.Entity("LY.WMSCloud.Entities.ProduceData.Reel", b =>
                {
                    b.HasOne("LY.WMSCloud.Entities.BaseData.MPN", "PartNo")
                        .WithMany()
                        .HasForeignKey("PartNoId");

                    b.HasOne("LY.WMSCloud.Entities.ProduceData.ReadyMBillDetailed", "ReadyMBillDetailed")
                        .WithMany()
                        .HasForeignKey("ReadyMBillDetailedId");

                    b.HasOne("LY.WMSCloud.Entities.ProduceData.ReadyMBill", "ReadyMBill")
                        .WithMany()
                        .HasForeignKey("ReadyMBillId");

                    b.HasOne("LY.WMSCloud.Entities.ProduceData.ReceivedReelBill", "ReceivedReelBill")
                        .WithMany()
                        .HasForeignKey("ReceivedReelBillId");

                    b.HasOne("LY.WMSCloud.Entities.StorageData.Storage", "Storage")
                        .WithMany()
                        .HasForeignKey("StorageId");

                    b.HasOne("LY.WMSCloud.Entities.StorageData.StorageLocation", "StorageLocation")
                        .WithMany()
                        .HasForeignKey("StorageLocationId1");

                    b.HasOne("LY.WMSCloud.Entities.ProduceData.WorkBillDetailed", "WorkBillDetailed")
                        .WithMany()
                        .HasForeignKey("WorkBillDetailedId");

                    b.HasOne("LY.WMSCloud.Entities.ProduceData.WorkBill", "WorkBill")
                        .WithMany()
                        .HasForeignKey("WorkBillId");
                });

            modelBuilder.Entity("LY.WMSCloud.Entities.ProduceData.ReelMoveLog", b =>
                {
                    b.HasOne("LY.WMSCloud.Entities.BaseData.BOM", "BOM")
                        .WithMany()
                        .HasForeignKey("BOMId");

                    b.HasOne("LY.WMSCloud.Entities.BaseData.MPN", "PartNo")
                        .WithMany()
                        .HasForeignKey("PartNoId");

                    b.HasOne("LY.WMSCloud.Entities.ProduceData.ReadyMBillDetailed", "ReadyMBillDetailed")
                        .WithMany()
                        .HasForeignKey("ReadyMBillDetailedId");

                    b.HasOne("LY.WMSCloud.Entities.ProduceData.ReadyMBill", "ReadyMBill")
                        .WithMany()
                        .HasForeignKey("ReadyMBillId");

                    b.HasOne("LY.WMSCloud.Entities.ProduceData.ReceivedReelBill", "ReceivedReelBill")
                        .WithMany()
                        .HasForeignKey("ReceivedReelBillId");

                    b.HasOne("LY.WMSCloud.Entities.ProduceData.ReelMoveMethod", "ReelMoveMethod")
                        .WithMany()
                        .HasForeignKey("ReelMoveMethodId");

                    b.HasOne("LY.WMSCloud.Entities.BaseData.Slot", "Slot")
                        .WithMany()
                        .HasForeignKey("SlotId");

                    b.HasOne("LY.WMSCloud.Entities.StorageData.StorageLocation", "StorageLocation")
                        .WithMany()
                        .HasForeignKey("StorageLocationId");

                    b.HasOne("LY.WMSCloud.Entities.ProduceData.WorkBill", "WorkBill")
                        .WithMany()
                        .HasForeignKey("WorkBillId");
                });

            modelBuilder.Entity("LY.WMSCloud.Entities.ProduceData.ReelMoveMethod", b =>
                {
                    b.HasOne("LY.WMSCloud.Entities.StorageData.Storage", "InStorage")
                        .WithMany()
                        .HasForeignKey("InStorageId");
                });

            modelBuilder.Entity("LY.WMSCloud.Entities.ProduceData.ReelSendTemp", b =>
                {
                    b.HasOne("LY.WMSCloud.Entities.BaseData.BOM", "BOM")
                        .WithMany()
                        .HasForeignKey("BOMId");

                    b.HasOne("LY.WMSCloud.Entities.BaseData.MPN", "PartNo")
                        .WithMany()
                        .HasForeignKey("PartNoId");

                    b.HasOne("LY.WMSCloud.Entities.ProduceData.ReadyMBill", "ReReadyMBill")
                        .WithMany()
                        .HasForeignKey("ReReadyMBillId");

                    b.HasOne("LY.WMSCloud.Entities.ProduceData.ReadyMBillDetailed", "ReadyMBillDetailed")
                        .WithMany()
                        .HasForeignKey("ReadyMBillDetailedId");

                    b.HasOne("LY.WMSCloud.Entities.ProduceData.ReelMoveMethod", "ReelMoveMethod")
                        .WithMany()
                        .HasForeignKey("ReelMoveMethodId");

                    b.HasOne("LY.WMSCloud.Entities.BaseData.Slot", "Slot")
                        .WithMany()
                        .HasForeignKey("SlotId");

                    b.HasOne("LY.WMSCloud.Entities.StorageData.StorageLocation", "StorageLocation")
                        .WithMany()
                        .HasForeignKey("StorageLocationId");
                });

            modelBuilder.Entity("LY.WMSCloud.Entities.ProduceData.ReelShortTemp", b =>
                {
                    b.HasOne("LY.WMSCloud.Entities.BaseData.BOM", "BOM")
                        .WithMany()
                        .HasForeignKey("BOMId");

                    b.HasOne("LY.WMSCloud.Entities.BaseData.MPN", "PartNo")
                        .WithMany()
                        .HasForeignKey("PartNoId");

                    b.HasOne("LY.WMSCloud.Entities.ProduceData.ReadyMBill", "ReReadyMBill")
                        .WithMany()
                        .HasForeignKey("ReReadyMBillId");

                    b.HasOne("LY.WMSCloud.Entities.ProduceData.ReadyMBillDetailed", "ReadyMBillDetailed")
                        .WithMany()
                        .HasForeignKey("ReadyMBillDetailedId");

                    b.HasOne("LY.WMSCloud.Entities.BaseData.Slot", "Slot")
                        .WithMany()
                        .HasForeignKey("SlotId");
                });

            modelBuilder.Entity("LY.WMSCloud.Entities.ProduceData.ReelSupplyTemp", b =>
                {
                    b.HasOne("LY.WMSCloud.Entities.BaseData.BOM", "BOM")
                        .WithMany()
                        .HasForeignKey("BOMId");

                    b.HasOne("LY.WMSCloud.Entities.BaseData.MPN", "PartNo")
                        .WithMany()
                        .HasForeignKey("PartNoId");

                    b.HasOne("LY.WMSCloud.Entities.ProduceData.ReadyMBill", "ReReadyMBill")
                        .WithMany()
                        .HasForeignKey("ReReadyMBillId");

                    b.HasOne("LY.WMSCloud.Entities.ProduceData.ReadyMBillDetailed", "ReadyMBillDetailed")
                        .WithMany()
                        .HasForeignKey("ReadyMBillDetailedId");

                    b.HasOne("LY.WMSCloud.Entities.ProduceData.ReelMoveMethod", "ReelMoveMethod")
                        .WithMany()
                        .HasForeignKey("ReelMoveMethodId");

                    b.HasOne("LY.WMSCloud.Entities.BaseData.Slot", "Slot")
                        .WithMany()
                        .HasForeignKey("SlotId");

                    b.HasOne("LY.WMSCloud.Entities.StorageData.StorageLocation", "StorageLocation")
                        .WithMany()
                        .HasForeignKey("StorageLocationId");
                });

            modelBuilder.Entity("LY.WMSCloud.Entities.ProduceData.UPH", b =>
                {
                    b.HasOne("LY.WMSCloud.Entities.BaseData.Line", "Line")
                        .WithMany()
                        .HasForeignKey("LineId");

                    b.HasOne("LY.WMSCloud.Entities.BaseData.MPN", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");
                });

            modelBuilder.Entity("LY.WMSCloud.Entities.ProduceData.WorkBill", b =>
                {
                    b.HasOne("LY.WMSCloud.Entities.BaseData.Line", "Line")
                        .WithMany()
                        .HasForeignKey("LineId");

                    b.HasOne("LY.WMSCloud.Entities.BaseData.MPN", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");
                });

            modelBuilder.Entity("LY.WMSCloud.Entities.ProduceData.WorkBillDetailed", b =>
                {
                    b.HasOne("LY.WMSCloud.Entities.BaseData.BOM", "BOM")
                        .WithMany()
                        .HasForeignKey("BOMId");

                    b.HasOne("LY.WMSCloud.Entities.BaseData.MPN", "PartNo")
                        .WithMany()
                        .HasForeignKey("PartNoId");

                    b.HasOne("LY.WMSCloud.Entities.BaseData.Slot", "Slot")
                        .WithMany()
                        .HasForeignKey("SlotId");

                    b.HasOne("LY.WMSCloud.Entities.ProduceData.WorkBill", "WorkBill")
                        .WithMany()
                        .HasForeignKey("WorkBillId");
                });

            modelBuilder.Entity("LY.WMSCloud.Entities.StorageData.MPNStorageAreaMap", b =>
                {
                    b.HasOne("LY.WMSCloud.Entities.BaseData.MPN", "MPN")
                        .WithMany("StorageAreas")
                        .HasForeignKey("MPNId");

                    b.HasOne("LY.WMSCloud.Entities.StorageData.StorageArea", "StorageArea")
                        .WithMany("MPNs")
                        .HasForeignKey("StorageAreaId");
                });

            modelBuilder.Entity("LY.WMSCloud.Entities.StorageData.RMMStorageMap", b =>
                {
                    b.HasOne("LY.WMSCloud.Entities.ProduceData.ReelMoveMethod", "ReelMoveMethod")
                        .WithMany("OutStorages")
                        .HasForeignKey("ReelMoveMethodId");

                    b.HasOne("LY.WMSCloud.Entities.StorageData.Storage", "Storage")
                        .WithMany("ReelMoveMethods")
                        .HasForeignKey("StorageId");
                });

            modelBuilder.Entity("LY.WMSCloud.Entities.StorageData.Storage", b =>
                {
                    b.HasOne("LY.WMSCloud.Authorization.Users.User", "AboutUser")
                        .WithMany()
                        .HasForeignKey("AboutUserId1");
                });

            modelBuilder.Entity("LY.WMSCloud.Entities.StorageData.StorageLocation", b =>
                {
                    b.HasOne("LY.WMSCloud.Entities.StorageData.StorageArea", "StorageArea")
                        .WithMany("StorageLocations")
                        .HasForeignKey("StorageAreaId");

                    b.HasOne("LY.WMSCloud.Entities.StorageData.Storage", "Storage")
                        .WithMany()
                        .HasForeignKey("StorageId");

                    b.HasOne("LY.WMSCloud.Entities.StorageData.StorageLocationType", "StorageLocationType")
                        .WithMany()
                        .HasForeignKey("StorageLocationTypeId");
                });

            modelBuilder.Entity("LY.WMSCloud.MultiTenancy.Tenant", b =>
                {
                    b.HasOne("LY.WMSCloud.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("LY.WMSCloud.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("Abp.Application.Editions.Edition", "Edition")
                        .WithMany()
                        .HasForeignKey("EditionId");

                    b.HasOne("LY.WMSCloud.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");
                });

            modelBuilder.Entity("Abp.Application.Features.EditionFeatureSetting", b =>
                {
                    b.HasOne("Abp.Application.Editions.Edition", "Edition")
                        .WithMany()
                        .HasForeignKey("EditionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Abp.Authorization.Roles.RolePermissionSetting", b =>
                {
                    b.HasOne("LY.WMSCloud.Authorization.Roles.Role")
                        .WithMany("Permissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserPermissionSetting", b =>
                {
                    b.HasOne("LY.WMSCloud.Authorization.Users.User")
                        .WithMany("Permissions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
